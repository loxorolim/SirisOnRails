set Z;
 set Y;
 param A{r in Z, m in Y} default 0, binary;
param B{r in Z} default 2, integer;
 var Route{m in Y}, binary;
 minimize cost: sum{m in Y} Route[m];
 subject to covers{r in Z}: sum{m in Y} A[r,m]*Route[m]>=B[r];
 solve; 
 printf {m in Y:  Route[m] == 1} "%s ", m > "C:/Users/Guilherme/Documents/GitHub/SirisOnRails/Results.txt";
 data;
set Z:= Z764 Z765 Z796 Z798 Z800 Z805 Z806 ;
set Y:= Y51 Y28 Y39 Y56 Y57 Y52 Y53 Y54 Y55 Y58 Y62 Y31 Y38 ;
param A := 
[Z764,Y51] 1[Z765,Y51] 1[Z796,Y56] 1[Z798,Y56] 1[Z800,Y56] 1[Z805,Y56] 1[Z806,Y56] 1
;
param B := 
[Z764] 1[Z765] 1[Z796] 1[Z798] 1[Z800] 1[Z805] 1[Z806] 1
;
end;
