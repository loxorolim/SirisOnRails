set Z;
 set Y;
 param A{r in Z, m in Y} default 0, binary;
param B{r in Z} default 1, integer;
 var Route{m in Y}, binary;
 minimize cost: sum{m in Y} Route[m];
 subject to covers{r in Z}: sum{m in Y} A[r,m]*Route[m]>=B[r];
 solve; 
 printf {m in Y:  Route[m] == 1} "%s ", m > "C:/Users/Guilherme/Documents/GitHub/SirisOnRails/Results.txt";
 data;
set Z:= Z0 Z1 Z2 Z3 Z4 Z5 Z6 Z7 Z8 Z9 Z10 Z11 Z12 Z13 Z14 Z15 Z16 Z17 Z18 Z19 Z20 Z21 Z22 Z23 Z24 Z25 Z26 Z27 Z28 Z29 Z30 Z31 Z32 ;
set Y:= Y0 Y1 Y2 Y3 Y4 Y5 Y6 Y7 Y8 Y9 Y10 Y11 Y12 Y13 Y14 ;
param A := 
[Z0,Y0] 1[Z0,Y1] 1[Z0,Y2] 1[Z0,Y11] 1[Z1,Y0] 1[Z1,Y1] 1[Z1,Y2] 1[Z1,Y11] 1[Z2,Y0] 1[Z2,Y1] 1[Z2,Y2] 1[Z2,Y11] 1[Z3,Y0] 1[Z3,Y1] 1[Z3,Y2] 1[Z3,Y6] 1[Z3,Y7] 1[Z3,Y11] 1[Z3,Y13] 1[Z4,Y0] 1[Z4,Y1] 1[Z4,Y2] 1[Z4,Y6] 1[Z4,Y7] 1[Z4,Y11] 1[Z4,Y13] 1[Z5,Y0] 1[Z5,Y1] 1[Z5,Y2] 1[Z5,Y6] 1[Z5,Y7] 1[Z5,Y11] 1[Z5,Y13] 1[Z6,Y0] 1[Z6,Y1] 1[Z6,Y2] 1[Z6,Y6] 1[Z6,Y7] 1[Z6,Y11] 1[Z6,Y13] 1[Z7,Y0] 1[Z7,Y1] 1[Z7,Y2] 1[Z7,Y6] 1[Z7,Y7] 1[Z7,Y11] 1[Z7,Y13] 1[Z8,Y3] 1[Z9,Y3] 1[Z13,Y5] 1[Z15,Y5] 1[Z18,Y0] 1[Z18,Y1] 1[Z19,Y0] 1[Z19,Y1] 1[Z19,Y2] 1[Z23,Y10] 1[Z24,Y10] 1[Z25,Y7] 1[Z25,Y8] 1[Z25,Y9] 1[Z25,Y12] 1[Z26,Y7] 1[Z26,Y8] 1[Z26,Y9] 1[Z26,Y12] 1[Z27,Y7] 1[Z27,Y8] 1[Z27,Y9] 1[Z27,Y12] 1[Z28,Y7] 1[Z28,Y8] 1[Z28,Y12] 1[Z30,Y7] 1[Z30,Y8] 1[Z30,Y9] 1[Z30,Y12] 1[Z31,Y7] 1[Z31,Y8] 1[Z31,Y9] 1[Z32,Y7] 1[Z32,Y8] 1[Z32,Y9] 1[Z32,Y12] 1
;
param B := 
[Z10] 0[Z11] 0[Z12] 0[Z14] 0[Z16] 0[Z17] 0[Z20] 0[Z21] 0[Z22] 0[Z29] 0
;
end;
