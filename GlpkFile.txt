set Z;
 set Y;
 param A{r in Z, m in Y} default 0, binary;
 var Route{m in Y}, binary;
 minimize cost: sum{m in Y} Route[m];
 subject to covers{r in Z}: sum{m in Y} A[r,m]*Route[m]>=1;
 solve; 
 printf {m in Y:  Route[m] == 1} "%s ", m > "Results.txt";
 data;
set Z:= Z1 Z2 Z3 Z4 Z5 Z6 Z7 Z8 Z9 Z10 Z11 Z12 Z13 Z14 Z15 Z16 ;
set Y:= Y1 Y2 Y3 Y4 Y5 Y6 Y7 ;
param A := 
[Z1,Y1] 1[Z1,Y2] 1[Z1,Y3] 1[Z2,Y1] 1[Z2,Y2] 1[Z2,Y3] 1[Z2,Y4] 1[Z3,Y1] 1[Z3,Y2] 1[Z3,Y3] 1[Z3,Y4] 1[Z4,Y1] 1[Z4,Y2] 1[Z4,Y3] 1[Z4,Y4] 1[Z5,Y1] 1[Z5,Y2] 1[Z5,Y3] 1[Z5,Y4] 1[Z6,Y2] 1[Z6,Y3] 1[Z6,Y4] 1[Z6,Y5] 1[Z7,Y6] 1[Z7,Y7] 1[Z8,Y6] 1[Z8,Y7] 1[Z9,Y6] 1[Z9,Y7] 1[Z10,Y1] 1[Z10,Y2] 1[Z10,Y3] 1[Z10,Y4] 1[Z10,Y5] 1[Z11,Y1] 1[Z11,Y2] 1[Z11,Y3] 1[Z11,Y4] 1[Z11,Y5] 1[Z12,Y1] 1[Z12,Y2] 1[Z12,Y3] 1[Z12,Y4] 1[Z12,Y5] 1[Z13,Y1] 1[Z13,Y2] 1[Z13,Y3] 1[Z13,Y4] 1[Z13,Y5] 1[Z14,Y1] 1[Z14,Y2] 1[Z14,Y3] 1[Z14,Y4] 1[Z14,Y5] 1[Z15,Y1] 1[Z15,Y2] 1[Z15,Y3] 1[Z15,Y4] 1[Z16,Y1] 1[Z16,Y2] 1[Z16,Y3] 1
;end;
