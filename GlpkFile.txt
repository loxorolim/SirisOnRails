set Z;
 set Y;
 param A{r in Z, m in Y} default 0, binary;
param B{r in Z} default 1, integer;
 var Route{m in Y}, binary;
 minimize cost: sum{m in Y} Route[m];
 subject to covers{r in Z}: sum{m in Y} A[r,m]*Route[m]>=B[r];
 solve; 
 printf {m in Y:  Route[m] == 1} "%s ", m > "C:/Users/Guilherme/Documents/GitHub/SirisOnRails/SirisOnRails/Results.txt";
 data;
set Z:= Z1453 Z1454 Z1495 Z1496 Z1497 Z1498 Z1499 Z1500 Z1501 Z1502 Z1503 Z1504 ;
set Y:= Y409 Y413 Y415 Y416 Y417 Y418 Y429 Y430 Y431 Y432 Y408 Y411 Y412 Y414 Y390 Y391 Y392 Y399 Y410 Y419 Y420 Y218 Y219 Y220 Y423 Y424 Y425 Y426 Y427 Y428 Y396 Y397 Y398 Y404 Y405 Y406 Y407 ;
param A := 
[Z1453,Y418] 1[Z1454,Y418] 1[Z1495,Y429] 1[Z1496,Y429] 1[Z1497,Y430] 1[Z1498,Y430] 1[Z1499,Y431] 1[Z1500,Y431] 1[Z1501,Y431] 1[Z1501,Y432] 1[Z1502,Y431] 1[Z1502,Y432] 1[Z1503,Y431] 1[Z1503,Y432] 1[Z1504,Y431] 1[Z1504,Y432] 1
;
param B := 

;
end;
